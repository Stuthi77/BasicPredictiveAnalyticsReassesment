# -*- coding: utf-8 -*-
"""lab2_lvadsusr80_stuthi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xGQqjegxhEoXqzaaQ4fk2MMQ1pYGX1sh
"""

#Classification Model
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

#loading dataset
df=pd.read_csv('/content/penguins_classification.csv')
df

#Checking for null values
df.isnull().sum()
df.isna().sum()



#handling null values
df['bill_depth_mm'].replace(np.nan,df['bill_depth_mm'].mean(),inplace=True)
df.isnull().sum()
df.isna().sum()

df.info()

#checking and removing the duplicate values
df.drop_duplicates(inplace=True)
df.duplicated().sum()

#outlier detection
print(df.describe())

df.plot(kind='box')
plt.xticks(rotation=90)
plt.show()

for column in df.describe():
  df[column].plot(kind='hist')
  plt.xlabel(column)
  plt.show()

values=df.describe()
Q1=values.loc['25%']
Q3=values.loc['75%']
upper_bound=Q3+(Q3-Q1)*1.5
lower_bound=Q1-(Q3-Q1)*1.5
outlier=[]
for index in Q1.index:
  number=len(df[(df[index]>upper_bound[index])|(df[index]<lower_bound[index])])
  if number>0:
    outlier.append([index,number])
print(outlier)

print(df)
#correlation analysis
import numpy as np
numeric_df = df.select_dtypes(include=[np.number]).dropna()
import seaborn as sns
sns.heatmap(numeric_df.corr(), annot=True, cmap='coolwarm')
plt.title('Heatmap')
plt.show()

df.columns

df.info()

from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder,StandardScaler
#Converting categorical to numerical
l=LabelEncoder()
df['island']=l.fit_transform(df['island'])
X=df[['island','bill_length_mm','flipper_length_mm','bill_depth_mm','body_mass_g','year']]
Y=df['species']
#Splitting the data
x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.3)
#model Training and testing
Model=DecisionTreeClassifier()
Model.fit(x_train,y_train)
y_pred=Model.predict(x_test)
#model Evaluation
report=classification_report(y_test,y_pred)
print(report)