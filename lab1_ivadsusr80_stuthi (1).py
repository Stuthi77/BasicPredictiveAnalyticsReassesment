# -*- coding: utf-8 -*-
"""Lab1_Ivadsusr80_stuthi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IyNrU3Exa4bW8xbYZd59voDAxjfWz1dV
"""

#Linear Regression
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

#loading the dataset
df=pd.read_csv("/content/Fare prediction.csv")

df

df.info()

#data cleaning
df.isnull().sum()

#handling null values
df['pickup_latitude'].replace(np.nan,df['pickup_latitude'].mean(),inplace=True)
df['dropoff_longitude'].replace(np.nan,df['dropoff_longitude'].mean(),inplace=True)
df['dropoff_latitude'].replace(np.nan,df['dropoff_latitude'].mean(),inplace=True)
df['passenger_count'].replace(np.nan,df['passenger_count'].mean(),inplace=True)
df.isnull().sum()

#checking for duplicate values
print(df.duplicated().sum())
# converting the values in the given format
df['pickup_datetime']=pd.to_datetime(df['pickup_datetime'])

df.info()

from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report,accuracy_score,f1_score,recall_score,r2_score,mean_absolute_error
from sklearn.preprocessing import LabelEncoder,StandardScaler
from sklearn.linear_model import LinearRegression

#Model training
l=LabelEncoder()
df['key']=l.fit_transform(df['key'])
df['pickup_datetime']=l.fit_transform(df['pickup_datetime'])
#correlation analysis
numeric_df = df.select_dtypes(include=[np.number]).dropna()
import seaborn as sns
sns.heatmap(numeric_df.corr(), annot=True, cmap='coolwarm')
plt.title('Heatmap')
plt.show()
df.info()
#Feature Selection
X=df[['key','pickup_datetime','pickup_longitude','pickup_latitude','dropoff_longitude','dropoff_latitude','passenger_count']]
Y=df['fare_amount']
#model training
x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.3)
Model=LinearRegression()
Model.fit(x_train,y_train)
y_pred=Model.predict(x_test)
#model evaluation
from sklearn.metrics import accuracy_score,mean_squared_error,r2_score,f1_score
a=mean_squared_error(y_test,y_pred)
b=mean_squared_error(y_test,y_pred,squared=False)
c=r2_score(y_test,y_pred)
#d=f1_score(y_test,y_pred)
print(a,b,c)
#data vizualization
plt.scatter(x_test['pickup_datetime'],y_test,label="actual value",color='black')
plt.scatter(x_test['pickup_datetime'],y_pred,label='predicted value',color='blue')
plt.legend()
plt.grid(True)
plt.show()