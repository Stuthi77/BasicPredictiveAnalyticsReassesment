# -*- coding: utf-8 -*-
"""lab4_lvadsusr80_stuthi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1THySWUkeB73W77YYmOrG1kF5AtGnsq6o
"""

#Anamoly detection
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import StandardScaler, LabelEncoder

# Step 1: Read Data
df = pd.read_csv('/content/anomaly_train.csv')
df

#Data Preprocessing
df.isnull().sum()

df.duplicated().sum()

df.info()

df.describe()

sns.pairplot(df)
plt.show()

categorical_cols = df.select_dtypes(include=['object']).columns.tolist()

# Initialize LabelEncoder
label_encoder = LabelEncoder()

# Perform label encoding for each categorical column
for col in categorical_cols:
    df[col] = label_encoder.fit_transform(df[col])

# Step 6: Anomaly Detection Algorithm
# feature selection
X=df[['TransactionID','Amount','Type','Time','Location','User']]
# Feature Scaling
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Anomaly Detection using Isolation Forest
outlier_detector = IsolationForest(contamination=0.05, random_state=42)
outliers = outlier_detector.fit_predict(X_scaled)

# Step 7: Flag Anomalies
df['anomaly_flag'] = np.where(outliers == -1, 'Anomaly', 'Normal')

# Step 8: Further Investigation
# Further actions can be decided based on the 'anomaly_flag'

# Print flagged anomalies for further investigation
print("therefore Flagged Anomalies identified in these transactions:")
print(df[df['anomaly_flag'] == 'Anomaly'])

print(df[df['anomaly_flag'] == 'Anomaly'].count())

print(df[df['anomaly_flag'] == 'Normal'].count())